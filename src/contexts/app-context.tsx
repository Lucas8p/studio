
"use client";

import React, { createContext, useState } from 'react';
import type { ReactNode } from 'react';
import { useToast } from "@/hooks/use-toast";

export type Scenario = {
  id: string;
  title: string;
  description: string;
  options: [string, string];
  outcome?: number; // 0 for option 1, 1 for option 2
};

type NewScenarioData = {
  title: string;
  option1: string;
  option2: string;
}

type AppContextType = {
  balance: number;
  scenarios: Scenario[];
  addScenario: (data: NewScenarioData) => Promise<void>;
  placeBet: (scenarioId: string, optionIndex: number, amount: number) => void;
};

const initialScenarios: Scenario[] = [
  {
    id: '1',
    title: 'Will the church bake sale sell out of lemon bars first?',
    description: 'The annual bake sale is here! Agnes brings her legendary lemon bars, but Martha\'s magnificent muffins are also on the table. The tension is palpable. Where will the congregation flock first?',
    options: ['Yes, lemon bars reign supreme!', 'No, muffins will triumph!'],
    outcome: 0,
  },
  {
    id: '2',
    title: 'Will Pastor John\'s sermon go over 15 minutes?',
    description: 'Pastor John is known for his passionate and sometimes lengthy sermons. He promised to keep it brief this Sunday, but the spirit might move him. Will he stick to the schedule?',
    options: ['Yes, prepare for overtime!', 'No, he\'ll be concise!'],
    outcome: 1,
  },
  {
    id: '3',
    title: 'Will the youth group\'s car wash successfully clean a muddy tractor?',
    description: 'The youth group is washing cars for charity. Farmer McGregor just pulled up in his mud-caked tractor. Can their youthful exuberance conquer this colossal cleaning challenge?',
    options: ['Yes, they have the power!', 'No, the mud is eternal!'],
    outcome: 0,
  }
];

// Mock AI function
const generateDescription = async (title: string): Promise<string> => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(`An amusing and lighthearted description for "${title}" generated by our holy AI. It considers all the fun possibilities and adds a touch of divine humor to the scenario.`);
    }, 500);
  });
};

export const AppContext = createContext<AppContextType | undefined>(undefined);

export function AppProvider({ children }: { children: ReactNode }) {
  const [balance, setBalance] = useState(1000);
  const [scenarios, setScenarios] = useState<Scenario[]>(initialScenarios);
  const { toast } = useToast();

  const addScenario = async (data: NewScenarioData) => {
    const description = await generateDescription(data.title);
    const newScenario: Scenario = {
      id: new Date().getTime().toString(),
      title: data.title,
      description: description,
      options: [data.option1, data.option2],
      outcome: Math.round(Math.random()),
    };
    setScenarios(prev => [newScenario, ...prev]);
  };

  const placeBet = (scenarioId: string, optionIndex: number, amount: number) => {
    if (amount > balance) {
      toast({ variant: 'destructive', title: 'A Test of Prudence', description: 'Your funds are low. Perhaps a smaller leap of faith is in order?' });
      return;
    }

    setBalance(prev => prev - amount);
    toast({ title: 'Bet Placed!', description: `You've put your faith in it! $${amount} wagered. May fortune favor you!` });

    setTimeout(() => {
      const scenario = scenarios.find(s => s.id === scenarioId);
      if (scenario) {
        if (scenario.outcome === optionIndex) {
          const winnings = amount * 1.5;
          setBalance(prev => prev + winnings);
          toast({
            title: 'Hallelujah! You Won!',
            description: `The heavens smile upon you! You won $${winnings.toFixed(2)}.`,
          });
        } else {
          toast({
            variant: 'destructive',
            title: 'Have Faith!',
            description: `The Lord works in mysterious ways. You lost $${amount}, but not your spirit!`,
          });
        }
      }
    }, 3000);
  };

  const value = { balance, scenarios, addScenario, placeBet };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}
